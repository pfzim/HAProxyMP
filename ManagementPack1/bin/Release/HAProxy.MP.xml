<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>HAProxy.MP</ID>
      <Version>1.0.0.81</Version>
    </Identity>
    <Name>HAProxyManagementPack</Name>
    <References>
      <Reference Alias="MSDL">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.2.11719.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSWL">
        <ID>Microsoft.SystemCenter.WSManagement.Library</ID>
        <Version>7.2.11719.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MUL">
        <ID>Microsoft.Unix.Library</ID>
        <Version>7.7.1136.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MUSL">
        <ID>Microsoft.Unix.ShellCommand.Library</ID>
        <Version>7.6.1064.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Perf">
        <ID>System.Performance.Library</ID>
        <Version>7.0.8437.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="UnixAuth">
        <ID>Unix.Authoring.Library</ID>
        <Version>7.3.1.2</Version>
        <PublicKeyToken>a0ae1bc76c673799</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="HAProxy.Class" Accessibility="Public" Abstract="false" Base="MUL!Microsoft.Unix.LocalApplication" Hosted="true" Singleton="false" Extension="false">
          <Property ID="AppName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Frontend" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="HAProxy.Class.Discovery.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="Interval" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TargetSystem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ShellCommand" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Interval" Selector="$Config/Interval$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="HAProxy.Class.ShellCommandDiscovery.DS">
                <Interval>$Config/Interval$</Interval>
                <TargetSystem>$Config/TargetSystem$</TargetSystem>
                <ShellCommand>$Config/ShellCommand$</ShellCommand>
                <Timeout>30</Timeout>
              </DataSource>
              <ProbeAction ID="PSDisco" TypeID="Windows!Microsoft.Windows.PowerShellDiscoveryProbe">
                <ScriptName>HAProxy.Class.Discovery.DS.ps1</ScriptName>
                <ScriptBody>
                  #=================================================================================
                  #  PowerShell Discovery Script to parse a conf file from CAT output
                  #
                  #  Author: Kevin Holman
                  #  v1.0
                  #=================================================================================
                  param($SourceId,$ManagedEntityId,$TargetSystem,[string]$StdOut)


                  # Manual Testing section - put stuff here for manually testing script - typically parameters:
                  #=================================================================================
                  # $SourceId = '{00000000-0000-0000-0000-000000000000}'
                  # $ManagedEntityId = '{00000000-0000-0000-0000-000000000000}'
                  # [string]$StdOut = "STUFF=foo
                  #LOGPATH=/var/log/myapp.log
                  #VERSION=2.21.30
                  #FOO=stuff"
                  #  $TargetSystem = "ubuntu.opsmgr.net"
                  #=================================================================================


                  # Constants section - modify stuff here:
                  #=================================================================================
                  # Assign script name variable for use in event logging.
                  # ScriptName should be the same as the ID of the module that the script is contained in
                  $ScriptName = "HAProxy.Class.Discovery.DS.ps1"
                  $EventID = "6699"
                  #=================================================================================


                  # Starting Script section - All scripts get this
                  #=================================================================================
                  # Gather the start time of the script
                  $StartTime = Get-Date
                  #Set variable to be used in logging events
                  $whoami = whoami
                  # Load MOMScript API
                  $momapi = New-Object -comObject MOM.ScriptAPI
                  #=================================================================================


                  # Discovery Script section - Discovery scripts get this
                  #=================================================================================
                  # Load SCOM Discovery module
                  $DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
                  #=================================================================================


                  # Begin MAIN script section
                  #=================================================================================
                  # Log an event for the script starting
                  $momapi.LogScriptEvent($ScriptName,$EventID,0, "`nScript is starting. `nUNIX Computer: ($TargetSystem) `nRunning, as ($WhoAmI). `nStdOut:  ($StdOut)")

                  #Continue only if we got output from CAT operation
                  if($StdOut -ne $null -and $StdOut -ne "0" -and $StdOut -ne "")
                  {
                    $StdOutSplit = $StdOut -split "`n"
                    $fe = ($StdOutSplit[0] -replace '\s+',',') -split ','
                    
                  #$momapi.LogScriptEvent($ScriptName,$EventID,0, "`nReturning discovery data for UNIX Computer: ($TargetSystem) `nVersion: ($Version). `nLogPath:  ($LogPath)")

                  # Create discovery data
                  $instance = $DiscoveryData.CreateClassInstance("$MPElement[Name='HAProxy.Class']$")
                  $instance.AddProperty("$MPElement[Name='MUL!Microsoft.Unix.Computer']/PrincipalName$", $TargetSystem)
                  $instance.AddProperty("$MPElement[Name='HAProxy.Class']/AppName$", "HAProxy")
                  $instance.AddProperty("$MPElement[Name='HAProxy.Class']/Frontend$", $fe[1])
                  $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $TargetSystem)
                  $DiscoveryData.AddInstance($instance)
                  }
                  ELSE
                  {
                  # Log an event the StdOut was NULL
                  #$momapi.LogScriptEvent($ScriptName,$EventID,0, "StdOut was NULL.  Did not get any data from UNIX Shell Command")
                  }

                  # Return Discovery Items Normally
                  $DiscoveryData

                  # Return Discovery Bag to the command line for testing (does not work from ISE):
                  # $momapi.Return($DiscoveryData)
                  #=================================================================================
                  # End MAIN script section


                  # End of script section
                  #=================================================================================
                  #Log an event for script ending and total execution time.
                  #$EndTime = Get-Date
                  #$ScriptTime = ($EndTime - $StartTime).TotalSeconds
                  #$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
                  #=================================================================================
                  # End of script
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>SourceID</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ManagedEntityID</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>TargetSystem</Name>
                    <Value>$Config/TargetSystem$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>StdOut</Name>
                    <Value>$Data///*[local-name()="StdOut"]$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>300</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSDisco">
                <Node ID="DS" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="HAProxy.Class.ShellCommandDiscovery.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="Interval" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TargetSystem" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ShellCommand" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Timeout" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval>$Config/Interval$</Interval>
                    <SyncTime />
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="ProbeAction" TypeID="MUL!Microsoft.Unix.WSMan.Invoke.ProbeAction">
                <TargetSystem>$Config/TargetSystem$</TargetSystem>
                <Uri>http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem?__cimnamespace=root/scx</Uri>
                <Selector />
                <InvokeAction>ExecuteShellCommand</InvokeAction>
                <Input>&lt;p:ExecuteShellCommand_INPUT xmlns:p="http://schemas.microsoft.com/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem"&gt;&lt;p:command&gt;$Config/ShellCommand$&lt;/p:command&gt;&lt;p:timeout&gt;$Config/Timeout$&lt;/p:timeout&gt;&lt;/p:ExecuteShellCommand_INPUT&gt;</Input>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="ProbeAction">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>MSWL!Microsoft.SystemCenter.WSManagement.WSManData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="HAProxy.Class.Discovery" Enabled="true" Target="MUL!Microsoft.Unix.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="HAProxy.Class">
            <Property TypeID="HAProxy.Class" PropertyID="AppName" />
            <Property TypeID="HAProxy.Class" PropertyID="Frontend" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="HAProxy.Class.Discovery.DS">
          <Interval>86400</Interval>
          <TargetSystem>$Target/Property[Type="MUL!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem>
          <ShellCommand>[ -e /etc/haproxy/haproxy.cfg ] &amp;amp;&amp;amp; grep '^frontend' /etc/haproxy/haproxy.cfg</ShellCommand>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="HAProxy.Performance.Collect.Rule" Target="HAProxy.Class" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>PerformanceHealth</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="UnixAuth!Unix.Authoring.TimedShellScript.PropertyBag.DataSource">
            <Interval>120</Interval>
            <TargetSystem>$Target/Host/Property[Type="MUL!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem>
            <ShellScript>
                #!/bin/sh

if [ -x /opt/haproxy/scom_perf_collect.sh ] ; then
  /opt/haproxy/scom_perf_collect.sh $1
else
  echo show stat | socat /var/run/haproxy.sock - | awk -F ',' '{ if(NR &gt; 1 &amp;amp;&amp;amp; $0) { print $1 "," $2 ",current_session_rate," $34 "\n" $1 "," $2 ",http_responses_5xx," $43 } }'
  echo show table $1 | socat /var/run/haproxy.sock - | awk -F '[= ]' "{ if(NR &gt; 1 &amp;amp;&amp;amp; $0) { print \"$1,category,\" $3 \",\" $9 } }"
fi

              </ShellScript>
            <ScriptArguments>$Target/Property[Type="HAProxy.Class"]/Frontend$</ScriptArguments>
            <Timeout>60</Timeout>
            <UserName>$RunAs[Name="MUL!Microsoft.Unix.ActionAccount"]/UserName$</UserName>
            <Password>$RunAs[Name="MUL!Microsoft.Unix.ActionAccount"]/Password$</Password>
            <PSScriptName>HAProxy.Performance.Collect.Rule.ps1</PSScriptName>
            <PSScriptBody>

	param (
		[string] $StdOut,
		[string] $StdErr,
		[string] $ReturnCode
	)
	$api = New-Object -comObject 'MOM.ScriptAPI'

	[array] $out = $StdOut -split "`n"
	foreach($line in $out)
	{
		[array] $values = $line -split ","

		if($values.Count -eq 4)
		{
			  $bag = $api.CreatePropertyBag()
			  $bag.AddValue("CounterObject", $values[0].Trim())
			  $bag.AddValue("CounterInstance", $values[1].Trim())
			  $bag.AddValue("CounterName", $values[2].Trim())
			  $bag.AddValue("CounterValue", $values[3].Trim())
			  $bag
		}
	}

              </PSScriptBody>
            <FilterExpression>
              <RegExExpression>
                <ValueExpression>
                  <XPathQuery>Property[@Name='CounterValue']</XPathQuery>
                </ValueExpression>
                <Operator>MatchesRegularExpression</Operator>
                <Pattern>^[-+]?\d*[0-9]*(\.[0-9]+)?[Ee]?[-+]?[0-9]*$</Pattern>
              </RegExExpression>
            </FilterExpression>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="Mapper" TypeID="Perf!System.Performance.DataGenericMapper">
          <ObjectName>$Data/Property[@Name='CounterObject']$</ObjectName>
          <CounterName>$Data/Property[@Name='CounterName']$</CounterName>
          <InstanceName>$Data/Property[@Name='CounterInstance']$</InstanceName>
          <Value>$Data/Property[@Name='CounterValue']$</Value>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <WriteAction ID="WriteToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
        </WriteActions>
      </Rule>
    </Rules>
    <Monitors>
      <UnitMonitor ID="HAProxy.Unix.ShellCommand.Running.Monitor" Accessibility="Public" Enabled="true" Target="HAProxy.Class" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="MUSL!Microsoft.Unix.ShellCommand.TwoState.MonitorType" ConfirmDelivery="false">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="HAProxy.Unix.ShellCommand.Running.Monitor.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <!-- Warning or Error should match OperationalStates below  -->
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
          <!-- Common options for AlertSeverity are MatchMonitorHealth, Information, Warning, Error -->
          <AlertParameters>
            <AlertParameter1>$Target/Host/Property[Type="MUL!Microsoft.Unix.Computer"]/PrincipalName$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="StatusOK" MonitorTypeStateID="StatusOK" HealthState="Success" />
          <OperationalState ID="StatusError" MonitorTypeStateID="StatusError" HealthState="Error" />
          <!-- HealthState = Warning or Error -->
        </OperationalStates>
        <Configuration>
          <Interval>300</Interval>
          <!-- seconds -->
          <SyncTime />
          <TargetSystem>$Target/Host/Property[Type="MUL!Microsoft.Unix.Computer"]/NetworkName$</TargetSystem>
          <UserName>$RunAs[Name="MUL!Microsoft.Unix.ActionAccount"]/UserName$</UserName>
          <Password>$RunAs[Name="MUL!Microsoft.Unix.ActionAccount"]/Password$</Password>
          <ShellCommand>systemctl show haproxy.service -p ActiveState</ShellCommand>
          <TimeOut>120</TimeOut>
          <TimeOutInMS>120000</TimeOutInMS>
          <HealthyExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">//*[local-name()="StdOut"]</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">ActiveState=active</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Integer">//*[local-name()="ReturnCode"]</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="Integer">0</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </HealthyExpression>
          <ErrorExpression>
            <Or>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">//*[local-name()="StdOut"]</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="String">ActiveState=active</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Integer">//*[local-name()="ReturnCode"]</XPathQuery>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
                  <ValueExpression>
                    <Value Type="Integer">0</Value>
                    <!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </Or>
          </ErrorExpression>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <Views>
      <View ID="HAProxy.Alert.View" Accessibility="Internal" Enabled="true" Target="HAProxy.Class" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Custom</Category>
        <Criteria>
          <ResolutionState>
            <StateRange Operator="NotEquals">255</StateRange>
          </ResolutionState>
        </Criteria>
      </View>
      <View ID="HAProxy.Perf.View" Accessibility="Internal" Enabled="true" Target="HAProxy.Class" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="true">
        <Category>Custom</Category>
        <Criteria />
      </View>
      <View ID="HAProxy.State.View" Accessibility="Internal" Enabled="true" Target="HAProxy.Class" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Custom</Category>
        <Criteria />
      </View>
    </Views>
    <Folders>
      <Folder ID="HAProxy.Root.Folder" Accessibility="Internal" ParentFolder="SC!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
    </Folders>
    <FolderItems>
      <FolderItem ElementID="HAProxy.Alert.View" ID="HAProxy.Alert.View.FolderItem" Folder="HAProxy.Root.Folder" />
      <FolderItem ElementID="HAProxy.Perf.View" ID="HAProxy.Perf.View.FolderItem" Folder="HAProxy.Root.Folder" />
      <FolderItem ElementID="HAProxy.State.View" ID="HAProxy.State.View.FolderItem" Folder="HAProxy.Root.Folder" />
    </FolderItems>
    <StringResources>
      <StringResource ID="HAProxy.Unix.ShellCommand.Running.Monitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="HAProxy.Class">
          <Name>HAProxy Class</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="HAProxy.Class" SubElementID="AppName">
          <Name>Application Name</Name>
        </DisplayString>
        <DisplayString ElementID="HAProxy.Class" SubElementID="Frontend">
          <Name>Frontend</Name>
        </DisplayString>
        <DisplayString ElementID="HAProxy.Class.Discovery">
          <Name>HAProxy Class Discovery</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="HAProxy.Alert.View">
          <Name>Alerts</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="HAProxy.Perf.View">
          <Name>Performance</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="HAProxy.Root.Folder">
          <Name>HAProxy MP</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="HAProxy.State.View">
          <Name>State</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="HAProxy.Unix.ShellCommand.Running.Monitor">
          <Name>HAProxy Running Monitor</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="HAProxy.Unix.ShellCommand.Running.Monitor" SubElementID="StatusError">
          <Name>Stopped</Name>
        </DisplayString>
        <DisplayString ElementID="HAProxy.Unix.ShellCommand.Running.Monitor" SubElementID="StatusOK">
          <Name>Running</Name>
        </DisplayString>
        <DisplayString ElementID="HAProxy.Unix.ShellCommand.Running.Monitor.AlertMessage">
          <Name>HAProxy Monitor Alert - is not running</Name>
          <Description>
            HAProxy is not running {0}

            systemctl status haproxy
            systemctl start haproxy
          </Description>
        </DisplayString>
        <DisplayString ElementID="HAProxy.Performance.Collect.Rule">
          <Name>HAProxy Performance Collector Rule (pfzim)</Name>
          <Description>HAProxy  multiple peformance counters from a single command execution</Description>
        </DisplayString>
        <DisplayString ElementID="HAProxy.MP">
          <Name>HAProxy Management Pack (pfzim)</Name>
          <Description>HAProxy Management Pack</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles></KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>